
----------------------------------------------------------

ТЕСТИРОВАНИЕ

----------------------------------------------------------

Зачем?

1) помогают проработать исключительные сценарии
2) тесты проверяют функциональность -> тесты помогают рефакторить
3) тесты помогают обновлять зависимости

Рефакторинг - процесс улучшения написанного ранее кода,
путем такого изменения его внутренней структуры,
которое не влияет на внешнее поведение.

----------------------------------------------------------

Тестовые кейсы

+1 тест на каждое действие
+1 тест на каждое исключение
+1 тест на каждое ветвление

Тест должен содержать одну логическую проверку,
которая (в идеале) не должна повторяться в других тестах.

----------------------------------------------------------

3 части тестирования

1. Подготовка
2. Действие (тестирование)
3. Проверка результата

----------------------------------------------------------

1. Unit
Тестирует работу только внутри одной части

2. Integration
Тестирует несколько связанных частей

3. End-to-end
Тестирует все
Selenium web-driver

----------------------------------------------------------

TDD (разработка через тестирование)

red -> green -> refactor

1) Тест на желаемое поведение - пишу тесты, запускаю, получаю "красный"
2) Написание реализации кода, починка теста - имплементирую код (реализую)
3) Улучшение кода - рефакторю код

----------------------------------------------------------

BDD
testing -> coding -> design -> (analysis)

Что тестировать?

В Unit-тестах: сервисы

----------------------------------------------------------

> npm i --save-dev mocha chai
> npm i --save-dev jest chai

package.json
{
  "scripts": {
    "test": "node node_modules/jest/bin/jest test --watch --coverage"
  }
}

> npm test

----------------------------------------------------------

Use Mocha

> mocha testFile.js
> mocha ./testDir --recursive // тестировать всю папку со всеми вложенными папками и файлами

Отчеты

> mocha test -r spec // вывод отчета
> mocha test -r dot // меньше информации
> mocha test -r min // минималистический отчет
> mocha test -r nyan // отчет с котиком :) ^-^

----------------------------------------------------------

Mockery - подмена оригинального модуля фейковым

> npm i mockery --save-dev

----------------------------------------------------------

Sinon - библиотека "заглушек"

> npm i sinon --save-dev

----------------------------------------------------------

Nock - библиотека для фейковых сетевых запросов

> npm i nock --save-dev

----------------------------------------------------------

Supertest - модуль для тестирования асинхронных веб-ресурсов

> npm i supertest --save-dev

----------------------------------------------------------

Istanbul - покрытие тестами и отчеты

> npm i -g istanbul

// вызываем mocha для прогона тестов
> istanbul cover _mocha <?path/to/dir>

// формируем отчет в виде html
> open coverage/username/index.html
